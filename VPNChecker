#!/usr/bin/env bash

# (C) 2022 littlejeem
# https://github.com/littlejeem

# This code is licensed under MIT license:
# http://opensource.org/licenses/MIT

# Shell Style Guide have been adhered to where viable
# https://google.github.io/styleguide/shell.xml
# and
# https://tldp.org/LDP/abs/html/index.html

# Linted with shellcheck: https://github.com/koalaman/shellcheck

# Developed using Atom: https://atom.io/

# References:
# HERE IF APLICABLE

# Credits
# Thank you to anyone who has made script, posted on stackexchange or posted a blog thats influenced me,
# if i've used something and not credited message me and I'll add it. ta!

# DISCLAIMER
# Whilst care has been taken to thoroughly test this script, my knowledge is currently limited to Ubuntu
# cases, # as with all Linux/UNIX-like affairs, it may still fail in mysterious
# circumstances. I'M STILL A NEWB!

###############################################################
###    "A script to monitor the cnnectivity of a set VPN.   ###
###    "the script should restart connection if down"       ###
###############################################################

#+--------------------------------------+
#+---"Exit Codes & Logging Verbosity"---+
#+--------------------------------------+
# Exit codes:
# pick from 64 - 113 (https://tldp.org/LDP/abs/html/exitcodes.html#FTN.AEN23647)
# exit 0 = Success
# exit 64 = Variable Error
# exit 65 = Sourcing file/folder error
# exit 66 = Processing Error
# exit 67 = Required Program Missing

# Verbosity levels
# silent_lvl=0
# crt_lvl=1
# err_lvl=2
# wrn_lvl=3
# ntf_lvl=4
# inf_lvl=5
# dbg_lvl=6


#+----------------------+
#+---"Notes on style"---+
#+----------------------+
# Use one return to seperate chunks of code from each other
# Use two returns to seperate sections in the script
# Use #+------+ to header sections
# Use ########
#     ###  ###
#     ######## to indicate important fill-in sections

# Two spaces to indent, NOT TABS!

# Todo example
# TODO(littlejeem): Handle the unlikely edge cases (bug ####)

# Google style guide states that a function uses the format 'function name () {' style to declare a function
# but commonly accepted practice is that function is no longer used and depricated so plain 'name () {'
# Use comments to describe inobvious functions, example below

#######################################
# Cleanup files from the backup directory.
# Globals:
#   BACKUP_DIR
#   ORACLE_SID
# Arguments:
#   None
#######################################

# the help function in this file needs no comments as its usage is straight forward


#+----------------------+
#+---"Check for Root"---+
#+----------------------+
#only needed if root privaleges necessary, enable
if [[ $EUID -ne 0 ]]; then
  echo "Please run this script with sudo:"
  echo "sudo $0 $*"
  exit 66
fi
#
#
#+-----------------------+
#+---"Set script name"---+
#+-----------------------+
# imports the name of this script
# failure to to set this as lockname will result in check_running failing and 'hung' script
# manually set this if being run as child from another script otherwise will inherit name of calling/parent script
scriptlong=$(basename "$0")
lockname=${scriptlong}
#
#
#+--------------------------+
#+---Source helper script---+
#+--------------------------+
source /usr/local/bin/helper_script.sh
#
#
#+---------------------+
#+---"Set Variables"---+
#+---------------------+
#set default logging level, failure to set this will cause a 'unary operator expected' error
#remember at level 3 and lower, only esilent messages show, best to include an override in getopts
verbosity=4
#
version="0.2" #
script_pid=$(echo $$)
#TODO(littlejeem): Look here at usage of backtics
stamp=$(echo "`date +%H.%M`-`date +%d_%m_%Y`")
notify_lock=/tmp/IPChecker_notify
pushover_title="VPN Checker"
#
#
#+---------------------------------------+
#+---"check if script already running"---+
#+---------------------------------------+
check_running


#+-------------------+
#+---Set functions---+
#+-------------------+
helpFunction () {
   echo ""
   echo "Usage: $0 $scriptlong"
   echo "Usage: $0 $scriptlong -G"
   echo -e "\t Running the script with no flags causes default behaviour with logging level set via 'verbosity' variable"
   echo -e "\t-S Override set verbosity to specify silent log level"
   echo -e "\t-V Override set verbosity to specify Verbose log level"
   echo -e "\t-G Override set verbosity to specify Debug log level"
   echo -e "\t-c Use this flag to override the default (4) ping requests sent, number needed"
   echo -e "\t-h Use this flag for help"
   if [ -d "/tmp/$lockname" ]; then
     edebug "removing lock directory"
     rm -r "/tmp/$lockname"
   else
     edebug "problem removing lock directory"
   fi
   exit 65 # Exit script after printing help
}


#+------------------------+
#+---"Get User Options"---+
#+------------------------+
OPTIND=1
while getopts ":SVGHh:c:" opt
do
    case "${opt}" in
        S) verbosity=$silent_lvl
        edebug "-S specified: Silent mode";;
        V) verbosity=$inf_lvl
        edebug "-V specified: Verbose mode";;
        G) verbosity=$dbg_lvl
        edebug "-G specified: Debug mode";;
        c) user_ping_count=${OPTARG}
        edebug "-c specified using alternative ping count";;
        H) helpFunction;;
        h) helpFunction;;
        ?) helpFunction;;
    esac
done
shift $((OPTIND -1))


#+----------------------+
#+---"Script Started"---+
#+----------------------+
# At this point the script is set up and all necessary conditions met so lets log this
esilent "$lockname started"


#+-------------------------------+
#+---Configure GETOPTS options---+
#+-------------------------------+
#e.g for a drive option
if [[ -z $user_ping_count ]]; then
  ping_count=4
  edebug "no alternative ping count specified, using default: $ping_count"
else
  ping_count=$(echo $user_ping_count)
  edebug "alternative ping count specified, using: $ping_count"
fi

edebug "GETOPTS options set"


#+--------------------------+
#+---"Source config file"---+
#+--------------------------+
source /usr/local/bin/config.sh


#+--------------------------------------+
#+---"Display some info about script"---+
#+--------------------------------------+
edebug "Version of $scriptlong is: $version"
edebug "Version of helper_script is: $helper_version"
edebug "PID is $script_pid"


#+-------------------+
#+---Set up script---+
#+-------------------+
#Get environmental info
edebug "INVOCATION_ID is set as: $INVOCATION_ID"
edebug "EUID is set as: $EUID"
edebug "PATH is: $PATH"


#+----------------------------+
#+---"Main Script Contents"---+
#+----------------------------+
ping -c "$ping_count" google.com > /dev/null
if [[ $? -gt 1 ]]; then
  ewarning "VPN killswitch activated"
  edebug "stopping transmission-daemon"
  if service --status-all | grep -Fq transmission-daemon; then
    systemctl stop transmission-daemon
    edebug "Stopped transmission-daemon"
  fi
  edebug "disconnecting from VPN"
  nordvpn disconnect
  sleep 20
  edebug "reconnecting to VPN"
  nordvpn connect
  sleep 20
  ping -c "$ping_count" google.com > /dev/null
  if [[ $? -eq 0 ]]; then
    enotify "Successfuly reconnected to VPN"
    edebug "restarting transmission-daemon"
    STATUS="$(systemctl is-active transmission-daemon)"
    if [ "${STATUS}" = "active" ]; then
      edebug "restarted transmission-daemon"
    else
      error "failed to start transmission-daemon"
    fi
  else
    eerror "Problem reconnecting to VPN, investigation needed"
  fi
elif [[ $? -eq 0 ]]; then
  einfo "VPN Connected all ok"
fi

#+-------------------+
#+---"Script Exit"---+
#+-------------------+
rm -r /tmp/"$lockname"
if [[ $? -ne 0 ]]; then
  eerror "error removing lockdirectory"
  exit 65
else
  einfo "successfully removed lockdirectory"
fi
esilent "$lockname completed"
exit 0
